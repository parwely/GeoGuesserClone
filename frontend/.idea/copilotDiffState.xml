<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;com.example.geogeusserclone.GeoGuessrApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.AuthActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MenuActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.GameActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;com.example.geogeusserclone.GeoGuessrApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.AuthActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MenuActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.GameActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/GeoGuessrApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/GeoGuessrApplication.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone&#10;&#10;import android.app.Application&#10;import dagger.hilt.android.HiltAndroidApp&#10;&#10;@HiltAndroidApp&#10;class GeoGuessrApplication : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/Networkmodule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/Networkmodule.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone&#10;&#10;import android.content.Context&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Cache&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;import java.util.concurrent.TimeUnit&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCache(@ApplicationContext context: Context): Cache {&#10;        val cacheSize = 10 * 1024 * 1024L // 10 MB&#10;        return Cache(context.cacheDir, cacheSize)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthInterceptor(): AuthInterceptor {&#10;        return AuthInterceptor()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        authInterceptor: AuthInterceptor,&#10;        cache: Cache&#10;    ): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .cache(cache)&#10;            .connectTimeout(5, TimeUnit.SECONDS) // Reduziere Timeout&#10;            .readTimeout(5, TimeUnit.SECONDS)&#10;            .writeTimeout(5, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.BASE_URL) // Directly use Constants.BASE_URL&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideApiService(retrofit: Retrofit): ApiService {&#10;        return retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.geogeusserclone&#10;&#10;import android.content.Context&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Cache&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;import java.util.concurrent.TimeUnit&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCache(@ApplicationContext context: Context): Cache {&#10;        val cacheSize = 10 * 1024 * 1024L // 10 MB&#10;        return Cache(context.cacheDir, cacheSize)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideAuthInterceptor(): AuthInterceptor {&#10;        return AuthInterceptor()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        authInterceptor: AuthInterceptor,&#10;        cache: Cache&#10;    ): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .cache(cache)&#10;            .connectTimeout(Constants.CONNECT_TIMEOUT, TimeUnit.SECONDS)&#10;            .readTimeout(Constants.READ_TIMEOUT, TimeUnit.SECONDS)&#10;            .writeTimeout(Constants.WRITE_TIMEOUT, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.BASE_URL)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideApiService(retrofit: Retrofit): ApiService {&#10;        return retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/models/GameStats.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/models/GameStats.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.models&#10;&#10;data class GameStats(&#10;    val totalGames: Int = 0,&#10;    val totalScore: Int = 0,&#10;    val averageScore: Double = 0.0,&#10;    val bestScore: Int = 0,&#10;    val perfectGuesses: Int = 0,&#10;    val averageDistance: Double = 0.0,&#10;    val bestDistance: Double = Double.MAX_VALUE,&#10;    val totalTimeSpent: Long = 0L,&#10;    val averageTimePerRound: Long = 0L,&#10;    val gamesWon: Int = 0,&#10;    val winRate: Double = 0.0,&#10;    val favoriteCountry: String? = null,&#10;    val monthlyStats: List&lt;MonthlyGameStats&gt; = emptyList()&#10;)&#10;&#10;data class MonthlyGameStats(&#10;    val month: String,&#10;    val year: Int,&#10;    val gamesPlayed: Int,&#10;    val totalScore: Int,&#10;    val averageScore: Double&#10;)&#10;&#10;data class UserStats(&#10;    val userId: String,&#10;    val username: String,&#10;    val totalGames: Int,&#10;    val totalScore: Int,&#10;    val averageScore: Double,&#10;    val bestScore: Int,&#10;    val rank: Int = 0,&#10;    val lastActive: Long = 0L&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/GameActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/GameActivity.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.components.MapGuessComponent&#10;import com.example.geogeusserclone.ui.components.StreetViewComponent&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.GameViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import com.example.geogeusserclone.ui.components.GameCompletionScreen&#10;import com.example.geogeusserclone.ui.components.RoundResulView&#10;import com.example.geogeusserclone.utils.enableEdgeToEdge&#10;&#10;@AndroidEntryPoint&#10;class GameActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                GameScreen(&#10;                    onNavigateBack = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GameScreen(&#10;    onNavigateBack: () -&gt; Unit,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val gameState by gameViewModel.uiState.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        if (gameState.currentGame == null) {&#10;            gameViewModel.startNewGame()&#10;        }&#10;    }&#10;&#10;    if (gameState.isLoading &amp;&amp; gameState.currentGame == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    gameState.currentGame?.let { game -&gt;&#10;                        Text(&quot;Runde ${game.currentRound}/${game.totalRounds}&quot;)&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Zurück&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            when {&#10;                gameState.showMap -&gt; {&#10;                    MapGuessComponent(&#10;                        onGuessSelected = { lat, lng -&gt;&#10;                            gameViewModel.submitGuess(lat, lng)&#10;                        },&#10;                        onMapClose = {&#10;                            gameViewModel.hideMap()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                gameState.showRoundResult -&gt; {&#10;                    RoundResultScreen(&#10;                        guess = gameState.revealGuessResult,&#10;                        onNextRound = {&#10;                            gameViewModel.proceedToNextRound()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                gameState.showGameCompletion -&gt; {&#10;                    GameCompletionScreen(&#10;                        game = gameState.currentGame,&#10;                        onPlayAgain = {&#10;                            gameViewModel.startNewGame()&#10;                        },&#10;                        onBackToMenu = onNavigateBack&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    GamePlayScreen(&#10;                        gameState = gameState,&#10;                        onMapClick = { gameViewModel.showMap() },&#10;                        onClearError = { gameViewModel.clearError() }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GamePlayScreen(&#10;    gameState: com.example.geogeusserclone.data.models.GameState,&#10;    onMapClick: () -&gt; Unit,&#10;    onClearError: () -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Game Info Header&#10;        gameState.currentGame?.let { game -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Text(&quot;Punkte: ${game.score}&quot;)&#10;                    Text(&quot;Zeit: ${gameState.timeRemaining / 1000}s&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Street View&#10;        StreetViewComponent(&#10;            location = gameState.currentLocation,&#10;            onMapClick = onMapClick,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;&#10;    // Error Snackbar&#10;    gameState.error?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            kotlinx.coroutines.delay(3000)&#10;            onClearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RoundResultScreen(&#10;    guess: com.example.geogeusserclone.data.database.entities.GuessEntity?,&#10;    onNextRound: () -&gt; Unit&#10;) {&#10;    guess?.let { guessEntity -&gt;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Rundenergebnis&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;${guessEntity.score} Punkte&quot;,&#10;                    style = MaterialTheme.typography.displayMedium,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot;Entfernung: ${&quot;%.1f&quot;.format(guessEntity.distance)} km&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;&#10;                Button(&#10;                    onClick = onNextRound,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Weiter&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.components.MapGuessComponent&#10;import com.example.geogeusserclone.ui.components.StreetViewComponent&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.GameViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import com.example.geogeusserclone.ui.components.GameCompletionScreen&#10;import com.example.geogeusserclone.ui.components.RoundResultView&#10;&#10;@AndroidEntryPoint&#10;class GameActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                GameScreen(&#10;                    onNavigateBack = { finish() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GameScreen(&#10;    onNavigateBack: () -&gt; Unit,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val gameState by gameViewModel.uiState.collectAsState()&#10;    var guesses by remember { mutableStateOf&lt;List&lt;com.example.geogeusserclone.data.database.entities.GuessEntity&gt;&gt;(emptyList()) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        if (gameState.currentGame == null) {&#10;            gameViewModel.startNewGame()&#10;        }&#10;    }&#10;&#10;    // Collect guesses&#10;    LaunchedEffect(gameState.currentGame) {&#10;        gameState.currentGame?.let { game -&gt;&#10;            gameViewModel.getGameGuesses().collect { guessList -&gt;&#10;                guesses = guessList&#10;            }&#10;        }&#10;    }&#10;&#10;    if (gameState.isLoading &amp;&amp; gameState.currentGame == null) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize(),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            CircularProgressIndicator()&#10;        }&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    gameState.currentGame?.let { game -&gt;&#10;                        Text(&quot;Runde ${game.currentRound}/${game.totalRounds}&quot;)&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Zurück&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            when {&#10;                gameState.showMap -&gt; {&#10;                    MapGuessComponent(&#10;                        onGuessSelected = { lat, lng -&gt;&#10;                            gameViewModel.submitGuess(lat, lng)&#10;                        },&#10;                        onMapClose = {&#10;                            gameViewModel.hideMap()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                gameState.showRoundResult -&gt; {&#10;                    RoundResultView(&#10;                        guess = gameState.revealGuessResult,&#10;                        onNextRound = {&#10;                            gameViewModel.proceedToNextRound()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                gameState.showGameCompletion -&gt; {&#10;                    gameState.currentGame?.let { game -&gt;&#10;                        GameCompletionScreen(&#10;                            game = game,&#10;                            guesses = guesses,&#10;                            onPlayAgain = {&#10;                                gameViewModel.startNewGame()&#10;                            },&#10;                            onMainMenu = onNavigateBack&#10;                        )&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    GamePlayScreen(&#10;                        gameState = gameState,&#10;                        onMapClick = { gameViewModel.showMap() },&#10;                        onClearError = { gameViewModel.clearError() }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GamePlayScreen(&#10;    gameState: com.example.geogeusserclone.data.models.GameState,&#10;    onMapClick: () -&gt; Unit,&#10;    onClearError: () -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Game Info Header&#10;        gameState.currentGame?.let { game -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    Text(&quot;Punkte: ${game.score}&quot;)&#10;                    Text(&quot;Zeit: ${gameState.timeRemaining / 1000}s&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Street View&#10;        StreetViewComponent(&#10;            location = gameState.currentLocation,&#10;            onMapClick = onMapClick,&#10;            modifier = Modifier.weight(1f)&#10;        )&#10;    }&#10;&#10;    // Error Snackbar&#10;    gameState.error?.let { error -&gt;&#10;        LaunchedEffect(error) {&#10;            kotlinx.coroutines.delay(3000)&#10;            onClearError()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RoundResultScreen(&#10;    guess: com.example.geogeusserclone.data.database.entities.GuessEntity?,&#10;    onNextRound: () -&gt; Unit&#10;) {&#10;    guess?.let { guessEntity -&gt;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Rundenergebnis&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;${guessEntity.score} Punkte&quot;,&#10;                    style = MaterialTheme.typography.displayMedium,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot;Entfernung: ${&quot;%.1f&quot;.format(guessEntity.distance)} km&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;&#10;                Button(&#10;                    onClick = onNextRound,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Weiter&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/components/RoundResultView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/components/RoundResultView.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.geogeusserclone.data.database.entities.GuessEntity&#10;&#10;@Composable&#10;fun RoundResultView(&#10;    guess: GuessEntity?,&#10;    onNextRound: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    guess?.let { guessEntity -&gt;&#10;        Card(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;Rundenergebnis&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Text(&#10;                    text = &quot;${guessEntity.score} Punkte&quot;,&#10;                    style = MaterialTheme.typography.displayMedium,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot;Entfernung: ${&quot;%.1f&quot;.format(guessEntity.distance)} km&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(32.dp))&#10;&#10;                Button(&#10;                    onClick = onNextRound,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;Weiter&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/DistanceCalculator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/DistanceCalculator.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.utils&#10;&#10;import kotlin.math.*&#10;&#10;object DistanceCalculator {&#10;    &#10;    /**&#10;     * Berechnet die Entfernung zwischen zwei Koordinaten using Haversine formula&#10;     */&#10;    fun calculateDistance(&#10;        lat1: Double, &#10;        lng1: Double, &#10;        lat2: Double, &#10;        lng2: Double&#10;    ): Double {&#10;        val earthRadius = 6371.0 // Earth radius in kilometers&#10;        &#10;        val dLat = Math.toRadians(lat2 - lat1)&#10;        val dLng = Math.toRadians(lng2 - lng1)&#10;        &#10;        val a = sin(dLat / 2).pow(2) + &#10;                cos(Math.toRadians(lat1)) * cos(Math.toRadians(lat2)) * &#10;                sin(dLng / 2).pow(2)&#10;        &#10;        val c = 2 * asin(sqrt(a))&#10;        &#10;        return earthRadius * c&#10;    }&#10;    &#10;    /**&#10;     * Formatiert Entfernung für Display&#10;     */&#10;    fun formatDistance(distanceKm: Double): String {&#10;        return when {&#10;            distanceKm &lt; 1.0 -&gt; &quot;${(distanceKm * 1000).toInt()} m&quot;&#10;            distanceKm &lt; 10.0 -&gt; &quot;${&quot;%.1f&quot;.format(distanceKm)} km&quot;&#10;            else -&gt; &quot;${distanceKm.toInt()} km&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/EdgeToEdge.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/EdgeToEdge.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.utils&#10;&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.enableEdgeToEdge as androidEnableEdgeToEdge&#10;&#10;fun ComponentActivity.enableEdgeToEdge() {&#10;    androidEnableEdgeToEdge()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/ScoreCalculator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/ScoreCalculator.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.utils&#10;&#10;import androidx.compose.ui.graphics.Color&#10;import com.example.geogeusserclone.utils.Constants&#10;&#10;enum class ScoreRating {&#10;    PERFECT, EXCELLENT, GOOD, FAIR, POOR, TERRIBLE&#10;}&#10;&#10;object ScoreCalculator {&#10;    &#10;    /**&#10;     * Berechnet den Score basierend auf Entfernung und Zeit&#10;     */&#10;    fun calculateScore(&#10;        distanceKm: Double,&#10;        timeSpentMs: Long = 0L,&#10;        maxTimeMs: Long = Constants.MAX_ROUND_TIME_MS&#10;    ): Int {&#10;        // Basis-Score basierend auf Entfernung (0-5000 Punkte)&#10;        val distanceScore = when {&#10;            distanceKm &lt;= Constants.PERFECT_DISTANCE_KM -&gt; 5000&#10;            distanceKm &lt;= Constants.EXCELLENT_DISTANCE_KM -&gt; 4500 - ((distanceKm - 1) * 50).toInt()&#10;            distanceKm &lt;= Constants.GOOD_DISTANCE_KM -&gt; 4000 - ((distanceKm - 10) * 75).toInt()&#10;            distanceKm &lt;= Constants.FAIR_DISTANCE_KM -&gt; 2000 - ((distanceKm - 50) * 10).toInt()&#10;            distanceKm &lt;= Constants.POOR_DISTANCE_KM -&gt; 500 - ((distanceKm - 200) * 0.5).toInt()&#10;            else -&gt; 0&#10;        }.coerceIn(0, 5000)&#10;        &#10;        // Zeit-Bonus (0-500 Punkte)&#10;        val timeBonus = if (timeSpentMs &gt; 0 &amp;&amp; maxTimeMs &gt; 0) {&#10;            val timeRatio = (maxTimeMs - timeSpentMs).toDouble() / maxTimeMs&#10;            (timeRatio * Constants.TIME_BONUS_MAX).toInt().coerceIn(0, Constants.TIME_BONUS_MAX)&#10;        } else 0&#10;        &#10;        return (distanceScore + timeBonus).coerceIn(0, 5500)&#10;    }&#10;    &#10;    /**&#10;     * Bestimmt die Score-Bewertung&#10;     */&#10;    fun getScoreRating(score: Int): ScoreRating {&#10;        return when {&#10;            score &gt;= 4500 -&gt; ScoreRating.PERFECT&#10;            score &gt;= 3500 -&gt; ScoreRating.EXCELLENT&#10;            score &gt;= 2500 -&gt; ScoreRating.GOOD&#10;            score &gt;= 1000 -&gt; ScoreRating.FAIR&#10;            score &gt;= 200 -&gt; ScoreRating.POOR&#10;            else -&gt; ScoreRating.TERRIBLE&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Gibt die passende Farbe für den Score zurück&#10;     */&#10;    fun getScoreColor(rating: ScoreRating): Color {&#10;        return when (rating) {&#10;            ScoreRating.PERFECT -&gt; Color(0xFF4CAF50)      // Grün&#10;            ScoreRating.EXCELLENT -&gt; Color(0xFF8BC34A)    // Hell-Grün&#10;            ScoreRating.GOOD -&gt; Color(0xFFFFC107)         // Gelb&#10;            ScoreRating.FAIR -&gt; Color(0xFFFF9800)         // Orange&#10;            ScoreRating.POOR -&gt; Color(0xFFFF5722)         // Rot-Orange&#10;            ScoreRating.TERRIBLE -&gt; Color(0xFFF44336)     // Rot&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/BaseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/BaseViewModel.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.viewmodels&#10;&#10;import androidx.lifecycle.ViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;&#10;abstract class BaseViewModel&lt;T&gt;(initialState: T) : ViewModel() {&#10;    &#10;    private val _state = MutableStateFlow(initialState)&#10;    val state: StateFlow&lt;T&gt; = _state.asStateFlow()&#10;&#10;    protected fun setState(newState: T) {&#10;        _state.value = newState&#10;    }&#10;&#10;    protected fun updateState(transform: (T) -&gt; T) {&#10;        _state.value = transform(_state.value)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/StatsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/StatsViewModel.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.viewmodels&#10;&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.geogeusserclone.data.database.entities.GameEntity&#10;import com.example.geogeusserclone.data.repositories.GameRepository&#10;import com.example.geogeusserclone.data.repositories.GameStats&#10;import com.example.geogeusserclone.data.repositories.UserRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;data class StatsState(&#10;    val isLoading: Boolean = false,&#10;    val userGames: List&lt;GameEntity&gt; = emptyList(),&#10;    val gameStats: GameStats? = null,&#10;    val error: String? = null,&#10;    val selectedTimeRange: TimeRange = TimeRange.ALL_TIME&#10;)&#10;&#10;enum class TimeRange {&#10;    ALL_TIME, LAST_WEEK, LAST_MONTH, LAST_YEAR&#10;}&#10;&#10;@HiltViewModel&#10;class StatsViewModel @Inject constructor(&#10;    private val gameRepository: GameRepository,&#10;    private val userRepository: UserRepository&#10;) : BaseViewModel&lt;StatsState&gt;(StatsState()) {&#10;&#10;    init {&#10;        loadUserStats()&#10;    }&#10;&#10;    private fun loadUserStats() {&#10;        viewModelScope.launch {&#10;            val currentUser = userRepository.getCurrentUser()&#10;            if (currentUser == null) {&#10;                setState(state.value.copy(error = &quot;Benutzer nicht angemeldet&quot;))&#10;                return@launch&#10;            }&#10;&#10;            setState(state.value.copy(isLoading = true))&#10;&#10;            try {&#10;                // Load user games&#10;                gameRepository.getGamesByUser(currentUser.id).collectLatest { games -&gt;&#10;                    val filteredGames = filterGamesByTimeRange(games, state.value.selectedTimeRange)&#10;                    setState(state.value.copy(userGames = filteredGames))&#10;                }&#10;&#10;                // Load game stats&#10;                val stats = gameRepository.getUserStats(currentUser.id)&#10;                setState(state.value.copy(&#10;                    isLoading = false,&#10;                    gameStats = stats,&#10;                    error = null&#10;                ))&#10;&#10;            } catch (e: Exception) {&#10;                setState(state.value.copy(&#10;                    isLoading = false,&#10;                    error = e.message ?: &quot;Statistiken konnten nicht geladen werden&quot;&#10;                ))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun changeTimeRange(timeRange: TimeRange) {&#10;        setState(state.value.copy(selectedTimeRange = timeRange))&#10;        loadUserStats()&#10;    }&#10;&#10;    private fun filterGamesByTimeRange(games: List&lt;GameEntity&gt;, timeRange: TimeRange): List&lt;GameEntity&gt; {&#10;        val currentTime = System.currentTimeMillis()&#10;        val filterTime = when (timeRange) {&#10;            TimeRange.ALL_TIME -&gt; 0L&#10;            TimeRange.LAST_WEEK -&gt; currentTime - (7 * 24 * 60 * 60 * 1000L)&#10;            TimeRange.LAST_MONTH -&gt; currentTime - (30 * 24 * 60 * 60 * 1000L)&#10;            TimeRange.LAST_YEAR -&gt; currentTime - (365 * 24 * 60 * 60 * 1000L)&#10;        }&#10;&#10;        return games.filter { it.timestamp &gt;= filterTime }&#10;    }&#10;&#10;    fun getAverageScoreByGameMode(): Map&lt;String, Double&gt; {&#10;        val games = state.value.userGames.filter { it.isCompleted }&#10;        return games.groupBy { it.gameMode }&#10;            .mapValues { (_, gameList) -&gt;&#10;                if (gameList.isEmpty()) 0.0&#10;                else gameList.map { it.score }.average()&#10;            }&#10;    }&#10;&#10;    fun getBestGamesByMode(): Map&lt;String, GameEntity?&gt; {&#10;        val games = state.value.userGames.filter { it.isCompleted }&#10;        return games.groupBy { it.gameMode }&#10;            .mapValues { (_, gameList) -&gt;&#10;                gameList.maxByOrNull { it.score }&#10;            }&#10;    }&#10;&#10;    fun getRecentGames(limit: Int = 10): List&lt;GameEntity&gt; {&#10;        return state.value.userGames&#10;            .filter { it.isCompleted }&#10;            .sortedByDescending { it.timestamp }&#10;            .take(limit)&#10;    }&#10;&#10;    fun clearError() {&#10;        setState(state.value.copy(error = null))&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.geogeusserclone.viewmodels&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.geogeusserclone.data.database.entities.GameEntity&#10;import com.example.geogeusserclone.data.models.GameStats&#10;import com.example.geogeusserclone.data.models.UserStats&#10;import com.example.geogeusserclone.data.repositories.GameRepository&#10;import com.example.geogeusserclone.data.repositories.UserRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;data class StatsUiState(&#10;    val gameStats: GameStats = GameStats(),&#10;    val userStats: List&lt;UserStats&gt; = emptyList(),&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null&#10;)&#10;&#10;@HiltViewModel&#10;class StatsViewModel @Inject constructor(&#10;    private val gameRepository: GameRepository,&#10;    private val userRepository: UserRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(StatsUiState())&#10;    val uiState: StateFlow&lt;StatsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadUserStats()&#10;    }&#10;&#10;    private fun loadUserStats() {&#10;        viewModelScope.launch {&#10;            _uiState.update { it.copy(isLoading = true) }&#10;&#10;            try {&#10;                val currentUser = userRepository.getCurrentUser()&#10;                if (currentUser != null) {&#10;                    // Lade Spiele-Statistiken&#10;                    gameRepository.getGameHistory(currentUser.id).collect { games: List&lt;GameEntity&gt; -&gt;&#10;                        val gameStats = calculateGameStats(games)&#10;                        _uiState.update { &#10;                            it.copy(&#10;                                gameStats = gameStats,&#10;                                isLoading = false,&#10;                                error = null&#10;                            )&#10;                        }&#10;                    }&#10;                } else {&#10;                    _uiState.update { &#10;                        it.copy(&#10;                            isLoading = false,&#10;                            error = &quot;Benutzer nicht angemeldet&quot;&#10;                        )&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.update { &#10;                    it.copy(&#10;                        isLoading = false,&#10;                        error = &quot;Fehler beim Laden der Statistiken: ${e.message}&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun calculateGameStats(games: List&lt;GameEntity&gt;): GameStats {&#10;        if (games.isEmpty()) return GameStats()&#10;&#10;        val completedGames = games.filter { it.isCompleted }&#10;        val totalGames = completedGames.size&#10;        val totalScore = completedGames.sumOf { it.score }&#10;        val averageScore = if (totalGames &gt; 0) totalScore.toDouble() / totalGames else 0.0&#10;        val bestScore = completedGames.maxOfOrNull { it.score } ?: 0&#10;&#10;        // Monatliche Statistiken berechnen&#10;        val monthlyStats = completedGames&#10;            .groupBy { game -&gt;&#10;                val date = java.util.Date(game.completedAt ?: game.createdAt)&#10;                val calendar = java.util.Calendar.getInstance()&#10;                calendar.time = date&#10;                &quot;${calendar.get(java.util.Calendar.MONTH + 1)}-${calendar.get(java.util.Calendar.YEAR)}&quot;&#10;            }&#10;            .map { (monthYear, monthGames) -&gt;&#10;                val parts = monthYear.split(&quot;-&quot;)&#10;                val month = parts[0]&#10;                val year = parts[1].toInt()&#10;                &#10;                com.example.geogeusserclone.data.models.MonthlyGameStats(&#10;                    month = getMonthName(month.toInt()),&#10;                    year = year,&#10;                    gamesPlayed = monthGames.size,&#10;                    totalScore = monthGames.sumOf { it.score },&#10;                    averageScore = monthGames.map { it.score }.average()&#10;                )&#10;            }&#10;            .sortedByDescending { it.year * 12 + getMonthNumber(it.month) }&#10;&#10;        return GameStats(&#10;            totalGames = totalGames,&#10;            totalScore = totalScore,&#10;            averageScore = averageScore,&#10;            bestScore = bestScore,&#10;            monthlyStats = monthlyStats&#10;        )&#10;    }&#10;&#10;    private fun getMonthName(month: Int): String {&#10;        return when (month) {&#10;            1 -&gt; &quot;Januar&quot;&#10;            2 -&gt; &quot;Februar&quot;&#10;            3 -&gt; &quot;März&quot;&#10;            4 -&gt; &quot;April&quot;&#10;            5 -&gt; &quot;Mai&quot;&#10;            6 -&gt; &quot;Juni&quot;&#10;            7 -&gt; &quot;Juli&quot;&#10;            8 -&gt; &quot;August&quot;&#10;            9 -&gt; &quot;September&quot;&#10;            10 -&gt; &quot;Oktober&quot;&#10;            11 -&gt; &quot;November&quot;&#10;            12 -&gt; &quot;Dezember&quot;&#10;            else -&gt; &quot;Unbekannt&quot;&#10;        }&#10;    }&#10;&#10;    private fun getMonthNumber(monthName: String): Int {&#10;        return when (monthName) {&#10;            &quot;Januar&quot; -&gt; 1&#10;            &quot;Februar&quot; -&gt; 2&#10;            &quot;März&quot; -&gt; 3&#10;            &quot;April&quot; -&gt; 4&#10;            &quot;Mai&quot; -&gt; 5&#10;            &quot;Juni&quot; -&gt; 6&#10;            &quot;Juli&quot; -&gt; 7&#10;            &quot;August&quot; -&gt; 8&#10;            &quot;September&quot; -&gt; 9&#10;            &quot;Oktober&quot; -&gt; 10&#10;            &quot;November&quot; -&gt; 11&#10;            &quot;Dezember&quot; -&gt; 12&#10;            else -&gt; 1&#10;        }&#10;    }&#10;&#10;    fun refreshStats() {&#10;        loadUserStats()&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.update { it.copy(error = null) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>