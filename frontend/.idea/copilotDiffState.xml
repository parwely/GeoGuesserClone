<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;com.example.geogeusserclone.GeoGuessrApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Permissions --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;com.example.geogeusserclone.GeoGuessrApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&#13;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#13;&#10;        &#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.AuthActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.MenuActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;com.example.geogeusserclone.ui.activities.GameActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.GeoGeusserClone&quot; /&gt;&#13;&#10;        &#13;&#10;    &lt;/application&gt;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/Networkmodule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/Networkmodule.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone&#10;&#10;import android.content.Context&#10;import com.example.geogeusserclone.BuildConfig&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Cache&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCache(@ApplicationContext context: Context): Cache {&#10;        val cacheSize = 10 * 1024 * 1024L // 10 MB&#10;        return Cache(context.cacheDir, cacheSize)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        authInterceptor: AuthInterceptor,&#10;        cache: Cache&#10;    ): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = try {&#10;                if (BuildConfig.DEBUG) {&#10;                    HttpLoggingInterceptor.Level.BODY&#10;                } else {&#10;                    HttpLoggingInterceptor.Level.NONE&#10;                }&#10;            } catch (e: Exception) {&#10;                // Fallback if BuildConfig is not available&#10;                HttpLoggingInterceptor.Level.NONE&#10;            }&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .cache(cache)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        val baseUrl = try {&#10;            BuildConfig.BASE_URL&#10;        } catch (e: Exception) {&#10;            // Fallback to Constants if BuildConfig is not available&#10;            Constants.BASE_URL&#10;        }&#10;&#10;        return Retrofit.Builder()&#10;            .baseUrl(baseUrl)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideApiService(retrofit: Retrofit): ApiService {&#10;        return retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.geogeusserclone&#10;&#10;import android.content.Context&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Cache&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideCache(@ApplicationContext context: Context): Cache {&#10;        val cacheSize = 10 * 1024 * 1024L // 10 MB&#10;        return Cache(context.cacheDir, cacheSize)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        authInterceptor: AuthInterceptor,&#10;        cache: Cache&#10;    ): OkHttpClient {&#10;        val loggingInterceptor = HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY // Always use BODY for debug&#10;        }&#10;&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .cache(cache)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.BASE_URL) // Directly use Constants.BASE_URL&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideApiService(retrofit: Retrofit): ApiService {&#10;        return retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/ApiService.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.data.network&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;interface ApiService {&#10;&#10;    // Authentication Endpoints&#10;    @POST(&quot;api/auth/login&quot;)&#10;    suspend fun login(@Body loginRequest: LoginRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/register&quot;)&#10;    suspend fun register(@Body registerRequest: RegisterRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/refresh&quot;)&#10;    suspend fun refreshToken(@Body refreshRequest: RefreshTokenRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/logout&quot;)&#10;    suspend fun logout(): Response&lt;Unit&gt;&#10;&#10;    // Game Endpoints&#10;    @GET(&quot;api/game/location&quot;)&#10;    suspend fun getRandomLocation(): Response&lt;LocationResponse&gt;&#10;&#10;    @POST(&quot;api/game/create&quot;)&#10;    suspend fun createGame(@Body gameRequest: CreateGameRequest): Response&lt;GameResponse&gt;&#10;&#10;    @POST(&quot;api/game/guess&quot;)&#10;    suspend fun submitGuess(@Body guessRequest: GuessRequest): Response&lt;GuessResponse&gt;&#10;&#10;    @GET(&quot;api/game/{gameId}&quot;)&#10;    suspend fun getGame(@Path(&quot;gameId&quot;) gameId: String): Response&lt;GameResponse&gt;&#10;&#10;    @PUT(&quot;api/game/{gameId}/complete&quot;)&#10;    suspend fun completeGame(@Path(&quot;gameId&quot;) gameId: String): Response&lt;GameResponse&gt;&#10;&#10;    // User &amp; Stats Endpoints&#10;    @GET(&quot;api/user/stats&quot;)&#10;    suspend fun getUserStats(): Response&lt;UserStatsResponse&gt;&#10;&#10;    @GET(&quot;api/user/profile&quot;)&#10;    suspend fun getUserProfile(): Response&lt;UserDto&gt;&#10;&#10;    @PUT(&quot;api/user/profile&quot;)&#10;    suspend fun updateUserProfile(@Body updateRequest: UpdateProfileRequest): Response&lt;UserDto&gt;&#10;&#10;    // Leaderboard &amp; Social&#10;    @GET(&quot;api/leaderboard&quot;)&#10;    suspend fun getLeaderboard(@Query(&quot;limit&quot;) limit: Int = 10): Response&lt;LeaderboardResponse&gt;&#10;&#10;    @GET(&quot;api/leaderboard/friends&quot;)&#10;    suspend fun getFriendsLeaderboard(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    // Battle Royale Endpoints&#10;    @POST(&quot;api/battle-royale/join&quot;)&#10;    suspend fun joinBattleRoyale(): Response&lt;BattleRoyaleResponse&gt;&#10;&#10;    @GET(&quot;api/battle-royale/{gameId}&quot;)&#10;    suspend fun getBattleRoyaleStatus(@Path(&quot;gameId&quot;) gameId: String): Response&lt;BattleRoyaleResponse&gt;&#10;&#10;    // Location Management&#10;    @GET(&quot;api/locations/batch&quot;)&#10;    suspend fun getLocationsBatch(@Query(&quot;count&quot;) count: Int = 10): Response&lt;LocationBatchResponse&gt;&#10;&#10;    @POST(&quot;api/locations/{locationId}/report&quot;)&#10;    suspend fun reportLocation(@Path(&quot;locationId&quot;) locationId: String, @Body report: LocationReportRequest): Response&lt;Unit&gt;&#10;&#10;&#10;    @PUT(&quot;users/{userId}/stats&quot;)&#10;    suspend fun updateUserStats(&#10;        @Path(&quot;userId&quot;) userId: String,&#10;        @Query(&quot;totalScore&quot;) totalScore: Int,&#10;        @Query(&quot;gamesPlayed&quot;) gamesPlayed: Int,&#10;        @Query(&quot;bestScore&quot;) bestScore: Int&#10;    ): Response&lt;Unit&gt;&#10;}&#10;&#10;// Request Data Classes&#10;data class LoginRequest(val email: String, val password: String)&#10;data class RegisterRequest(val username: String, val email: String, val password: String)&#10;data class RefreshTokenRequest(val refreshToken: String)&#10;data class CreateGameRequest(val gameMode: String, val rounds: Int = 5)&#10;data class GuessRequest(val gameId: String, val locationId: String, val latitude: Double, val longitude: Double)&#10;data class UpdateProfileRequest(val username: String?, val email: String?)&#10;data class LocationReportRequest(val reason: String, val description: String)&#10;&#10;// Response Data Classes&#10;data class AuthResponse(&#10;    val token: String,&#10;    val refreshToken: String,&#10;    val user: UserDto,&#10;    val expiresIn: Long&#10;)&#10;&#10;&#10;data class GameResponse(&#10;    val id: String,&#10;    val status: String,&#10;    val currentRound: Int,&#10;    val totalRounds: Int,&#10;    val score: Int,&#10;    val gameMode: String,&#10;    val isCompleted: Boolean,&#10;    val duration: Long?&#10;)&#10;&#10;data class GuessResponse(&#10;    val score: Int,&#10;    val distance: Double,&#10;    val points: Int,&#10;    val totalScore: Int,&#10;    val isCorrect: Boolean,&#10;    val timeBonus: Int = 0&#10;)&#10;&#10;data class UserStatsResponse(&#10;    val gamesPlayed: Int,&#10;    val totalScore: Int,&#10;    val bestScore: Int,&#10;    val averageScore: Double,&#10;    val totalDistance: Double,&#10;    val averageDistance: Double,&#10;    val bestDistance: Double,&#10;    val perfectGuesses: Int,&#10;    val rank: Int&#10;)&#10;&#10;data class LeaderboardResponse(&#10;    val users: List&lt;LeaderboardEntry&gt;,&#10;    val userRank: Int?,&#10;    val totalUsers: Int&#10;)&#10;&#10;data class BattleRoyaleResponse(&#10;    val gameId: String,&#10;    val status: String,&#10;    val players: List&lt;BattleRoyalePlayer&gt;,&#10;    val currentRound: Int,&#10;    val timeRemaining: Long,&#10;    val isEliminated: Boolean = false&#10;)&#10;&#10;data class LocationBatchResponse(&#10;    val locations: List&lt;LocationResponse&gt;&#10;)&#10;&#10;// Supporting Data Classes&#10;data class UserDto(&#10;    val id: String,&#10;    val username: String,&#10;    val email: String,&#10;    val createdAt: String,&#10;    val totalScore: Int = 0,&#10;    val gamesPlayed: Int = 0&#10;)&#10;&#10;data class LeaderboardEntry(&#10;    val userId: String,&#10;    val username: String,&#10;    val score: Int,&#10;    val rank: Int,&#10;    val gamesPlayed: Int,&#10;    val averageScore: Double&#10;)&#10;&#10;data class BattleRoyalePlayer(&#10;    val userId: String,&#10;    val username: String,&#10;    val score: Int,&#10;    val isEliminated: Boolean,&#10;    val rank: Int?&#10;)" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.network&#10;&#10;import retrofit2.Response&#10;import retrofit2.http.*&#10;&#10;interface ApiService {&#10;&#10;    // Authentication Endpoints&#10;    @POST(&quot;api/auth/login&quot;)&#10;    suspend fun login(@Body loginRequest: LoginRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/register&quot;)&#10;    suspend fun register(@Body registerRequest: RegisterRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/refresh&quot;)&#10;    suspend fun refreshToken(@Body refreshRequest: RefreshTokenRequest): Response&lt;AuthResponse&gt;&#10;&#10;    @POST(&quot;api/auth/logout&quot;)&#10;    suspend fun logout(): Response&lt;Unit&gt;&#10;&#10;    // Game Endpoints&#10;    @GET(&quot;api/game/location&quot;)&#10;    suspend fun getRandomLocation(): Response&lt;LocationResponse&gt;&#10;&#10;    @POST(&quot;api/game/create&quot;)&#10;    suspend fun createGame(@Body gameRequest: CreateGameRequest): Response&lt;GameResponse&gt;&#10;&#10;    @POST(&quot;api/game/guess&quot;)&#10;    suspend fun submitGuess(@Body guessRequest: GuessRequest): Response&lt;GuessResponse&gt;&#10;&#10;    @GET(&quot;api/game/{gameId}&quot;)&#10;    suspend fun getGame(@Path(&quot;gameId&quot;) gameId: String): Response&lt;GameResponse&gt;&#10;&#10;    @PUT(&quot;api/game/{gameId}/complete&quot;)&#10;    suspend fun completeGame(@Path(&quot;gameId&quot;) gameId: String): Response&lt;GameResponse&gt;&#10;&#10;    // User &amp; Stats Endpoints&#10;    @GET(&quot;api/user/stats&quot;)&#10;    suspend fun getUserStats(): Response&lt;UserStatsResponse&gt;&#10;&#10;    @GET(&quot;api/user/profile&quot;)&#10;    suspend fun getUserProfile(): Response&lt;UserDto&gt;&#10;&#10;    @PUT(&quot;api/user/profile&quot;)&#10;    suspend fun updateUserProfile(@Body updateRequest: UpdateProfileRequest): Response&lt;UserDto&gt;&#10;&#10;    // Leaderboard &amp; Social&#10;    @GET(&quot;api/leaderboard&quot;)&#10;    suspend fun getLeaderboard(@Query(&quot;limit&quot;) limit: Int = 10): Response&lt;LeaderboardResponse&gt;&#10;&#10;    @GET(&quot;api/leaderboard/friends&quot;)&#10;    suspend fun getFriendsLeaderboard(): Response&lt;LeaderboardResponse&gt;&#10;&#10;    // Battle Royale Endpoints&#10;    @POST(&quot;api/battle-royale/join&quot;)&#10;    suspend fun joinBattleRoyale(): Response&lt;BattleRoyaleResponse&gt;&#10;&#10;    @GET(&quot;api/battle-royale/{gameId}&quot;)&#10;    suspend fun getBattleRoyaleStatus(@Path(&quot;gameId&quot;) gameId: String): Response&lt;BattleRoyaleResponse&gt;&#10;&#10;    // Location Management&#10;    @GET(&quot;api/locations/batch&quot;)&#10;    suspend fun getLocationsBatch(@Query(&quot;count&quot;) count: Int = 10): Response&lt;LocationBatchResponse&gt;&#10;&#10;    @GET(&quot;api/locations&quot;)&#10;    suspend fun getLocations(@Query(&quot;count&quot;) count: Int = 50): Response&lt;LocationBatchResponse&gt;&#10;&#10;    @POST(&quot;api/locations/{locationId}/report&quot;)&#10;    suspend fun reportLocation(@Path(&quot;locationId&quot;) locationId: String, @Body report: LocationReportRequest): Response&lt;Unit&gt;&#10;&#10;&#10;    @PUT(&quot;users/{userId}/stats&quot;)&#10;    suspend fun updateUserStats(&#10;        @Path(&quot;userId&quot;) userId: String,&#10;        @Query(&quot;totalScore&quot;) totalScore: Int,&#10;        @Query(&quot;gamesPlayed&quot;) gamesPlayed: Int,&#10;        @Query(&quot;bestScore&quot;) bestScore: Int&#10;    ): Response&lt;Unit&gt;&#10;}&#10;&#10;// Request Data Classes&#10;data class LoginRequest(val email: String, val password: String)&#10;data class RegisterRequest(val username: String, val email: String, val password: String)&#10;data class RefreshTokenRequest(val refreshToken: String)&#10;data class CreateGameRequest(val gameMode: String, val rounds: Int = 5)&#10;data class GuessRequest(val gameId: String, val locationId: String, val latitude: Double, val longitude: Double)&#10;data class UpdateProfileRequest(val username: String?, val email: String?)&#10;data class LocationReportRequest(val reason: String, val description: String)&#10;&#10;// Response Data Classes&#10;data class AuthResponse(&#10;    val token: String,&#10;    val refreshToken: String,&#10;    val user: UserDto,&#10;    val expiresIn: Long&#10;)&#10;&#10;&#10;data class GameResponse(&#10;    val id: String,&#10;    val status: String,&#10;    val currentRound: Int,&#10;    val totalRounds: Int,&#10;    val score: Int,&#10;    val gameMode: String,&#10;    val isCompleted: Boolean,&#10;    val duration: Long?&#10;)&#10;&#10;data class GuessResponse(&#10;    val score: Int,&#10;    val distance: Double,&#10;    val points: Int,&#10;    val totalScore: Int,&#10;    val isCorrect: Boolean,&#10;    val timeBonus: Int = 0&#10;)&#10;&#10;data class UserStatsResponse(&#10;    val gamesPlayed: Int,&#10;    val totalScore: Int,&#10;    val bestScore: Int,&#10;    val averageScore: Double,&#10;    val totalDistance: Double,&#10;    val averageDistance: Double,&#10;    val bestDistance: Double,&#10;    val perfectGuesses: Int,&#10;    val rank: Int&#10;)&#10;&#10;data class LeaderboardResponse(&#10;    val users: List&lt;LeaderboardEntry&gt;,&#10;    val userRank: Int?,&#10;    val totalUsers: Int&#10;)&#10;&#10;data class BattleRoyaleResponse(&#10;    val gameId: String,&#10;    val status: String,&#10;    val players: List&lt;BattleRoyalePlayer&gt;,&#10;    val currentRound: Int,&#10;    val timeRemaining: Long,&#10;    val isEliminated: Boolean = false&#10;)&#10;&#10;data class LocationBatchResponse(&#10;    val locations: List&lt;LocationResponse&gt;&#10;)&#10;&#10;// Supporting Data Classes&#10;data class UserDto(&#10;    val id: String,&#10;    val username: String,&#10;    val email: String,&#10;    val createdAt: String,&#10;    val totalScore: Int = 0,&#10;    val gamesPlayed: Int = 0&#10;)&#10;&#10;data class LeaderboardEntry(&#10;    val userId: String,&#10;    val username: String,&#10;    val score: Int,&#10;    val rank: Int,&#10;    val gamesPlayed: Int,&#10;    val averageScore: Double&#10;)&#10;&#10;data class BattleRoyalePlayer(&#10;    val userId: String,&#10;    val username: String,&#10;    val score: Int,&#10;    val isEliminated: Boolean,&#10;    val rank: Int?&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/AuthInterceptor.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/AuthInterceptor.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.data.network&#10;&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.Interceptor&#10;import okhttp3.Response&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class AuthInterceptor @Inject constructor() : Interceptor {&#10;&#10;    private var authToken: String? = null&#10;    private var refreshToken: String? = null&#10;    private var tokenRefreshCallback: (suspend () -&gt; String?)? = null&#10;&#10;    override fun intercept(chain: Interceptor.Chain): Response {&#10;        val originalRequest = chain.request()&#10;&#10;        // Add auth token if available&#10;        val requestBuilder = originalRequest.newBuilder()&#10;        authToken?.let { token -&gt;&#10;            requestBuilder.addHeader(&quot;Authorization&quot;, &quot;Bearer $token&quot;)&#10;        }&#10;&#10;        val response = chain.proceed(requestBuilder.build())&#10;&#10;        // Handle 401 Unauthorized - try to refresh token&#10;        if (response.code == 401 &amp;&amp; refreshToken != null) {&#10;            response.close()&#10;&#10;            val newToken = runBlocking {&#10;                tokenRefreshCallback?.invoke()&#10;            }&#10;&#10;            if (newToken != null) {&#10;                authToken = newToken&#10;&#10;                // Retry the original request with new token&#10;                val newRequest = originalRequest.newBuilder()&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer $newToken&quot;)&#10;                    .build()&#10;&#10;                return chain.proceed(newRequest)&#10;            }&#10;        }&#10;&#10;        return response&#10;    }&#10;&#10;    fun setToken(token: String?) {&#10;        this.authToken = token&#10;    }&#10;&#10;    //Retry Logic:&#10;    fun setRefreshToken(token: String?) {&#10;        this.refreshToken = token&#10;    }&#10;&#10;    fun setTokenRefreshCallback(callback: suspend () -&gt; String?) {&#10;        this.tokenRefreshCallback = callback&#10;    }&#10;&#10;    fun clearTokens() {&#10;        authToken = null&#10;        refreshToken = null&#10;        tokenRefreshCallback = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.network&#10;&#10;import kotlinx.coroutines.runBlocking&#10;import okhttp3.Interceptor&#10;import okhttp3.Response&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class AuthInterceptor @Inject constructor() : Interceptor {&#10;&#10;    private var authToken: String? = null&#10;    private var refreshToken: String? = null&#10;    private var tokenRefreshCallback: (suspend () -&gt; String?)? = null&#10;&#10;    override fun intercept(chain: Interceptor.Chain): Response {&#10;        val originalRequest = chain.request()&#10;&#10;        // Add auth token if available&#10;        val requestBuilder = originalRequest.newBuilder()&#10;        authToken?.let { token -&gt;&#10;            requestBuilder.addHeader(&quot;Authorization&quot;, &quot;Bearer $token&quot;)&#10;        }&#10;&#10;        val response = chain.proceed(requestBuilder.build())&#10;&#10;        // Handle 401 Unauthorized - try to refresh token&#10;        if (response.code == 401 &amp;&amp; refreshToken != null) {&#10;            response.close()&#10;&#10;            val newToken = runBlocking {&#10;                tokenRefreshCallback?.invoke()&#10;            }&#10;&#10;            if (newToken != null) {&#10;                authToken = newToken&#10;&#10;                // Retry the original request with new token&#10;                val newRequest = originalRequest.newBuilder()&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer $newToken&quot;)&#10;                    .build()&#10;&#10;                return chain.proceed(newRequest)&#10;            }&#10;        }&#10;&#10;        return response&#10;    }&#10;&#10;    fun setAuthToken(token: String?) {&#10;        this.authToken = token&#10;    }&#10;&#10;    fun setToken(token: String?) {&#10;        this.authToken = token&#10;    }&#10;&#10;    //Retry Logic:&#10;    fun setRefreshToken(token: String?) {&#10;        this.refreshToken = token&#10;    }&#10;&#10;    fun setTokenRefreshCallback(callback: suspend () -&gt; String?) {&#10;        this.tokenRefreshCallback = callback&#10;    }&#10;&#10;    fun clearTokens() {&#10;        authToken = null&#10;        refreshToken = null&#10;        tokenRefreshCallback = null&#10;    }&#10;&#10;    fun clearAuthToken() {&#10;        authToken = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/UserRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/UserRepository.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.data.repositories&#10;&#10;import com.example.geogeusserclone.data.database.dao.UserDao&#10;import com.example.geogeusserclone.data.database.entities.UserEntity&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.data.network.LoginRequest&#10;import com.example.geogeusserclone.data.network.RegisterRequest&#10;import com.example.geogeusserclone.data.network.RefreshTokenRequest&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.Flow&#10;import java.util.UUID&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class UserRepository @Inject constructor(&#10;    private val apiService: ApiService,&#10;    private val userDao: UserDao,&#10;    private val authInterceptor: AuthInterceptor&#10;) : BaseRepository() {&#10;&#10;    fun getCurrentUserFlow(): Flow&lt;UserEntity?&gt; = userDao.getCurrentUserFlow()&#10;&#10;    suspend fun getCurrentUser(): UserEntity? = userDao.getCurrentUserSync()&#10;&#10;    suspend fun login(email: String, password: String): Result&lt;UserEntity&gt; {&#10;        return try {&#10;            val response = apiService.login(LoginRequest(email, password))&#10;&#10;            if (response.isSuccessful) {&#10;                val loginResponse = response.body()!!&#10;                val user = UserEntity(&#10;                    id = loginResponse.user.id,&#10;                    username = loginResponse.user.username,&#10;                    email = loginResponse.user.email,&#10;                    authToken = loginResponse.token,&#10;                    refreshToken = loginResponse.refreshToken,&#10;                    totalScore = loginResponse.user.totalScore,&#10;                    gamesPlayed = loginResponse.user.gamesPlayed,&#10;                    bestScore = loginResponse.user.bestScore,&#10;                    lastLoginAt = System.currentTimeMillis()&#10;                )&#10;&#10;                userDao.clearCurrentUser()&#10;                userDao.insertUser(user)&#10;                authInterceptor.setAuthToken(loginResponse.token)&#10;&#10;                Result.success(user)&#10;            } else {&#10;                Result.failure(Exception(&quot;Login fehlgeschlagen&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun register(username: String, email: String, password: String): Result&lt;UserEntity&gt; {&#10;        return try {&#10;            val response = apiService.register(RegisterRequest(username, email, password))&#10;&#10;            if (response.isSuccessful) {&#10;                val registerResponse = response.body()!!&#10;                val user = UserEntity(&#10;                    id = registerResponse.user.id,&#10;                    username = registerResponse.user.username,&#10;                    email = registerResponse.user.email,&#10;                    authToken = registerResponse.token,&#10;                    refreshToken = registerResponse.refreshToken,&#10;                    createdAt = System.currentTimeMillis(),&#10;                    lastLoginAt = System.currentTimeMillis()&#10;                )&#10;&#10;                userDao.clearCurrentUser()&#10;                userDao.insertUser(user)&#10;                authInterceptor.setAuthToken(registerResponse.token)&#10;&#10;                Result.success(user)&#10;            } else {&#10;                Result.failure(Exception(&quot;Registrierung fehlgeschlagen&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Offline Fallback für Registrierung&#10;            val offlineUser = UserEntity(&#10;                id = UUID.randomUUID().toString(),&#10;                username = username,&#10;                email = email,&#10;                authToken = &quot;offline_token&quot;,&#10;                createdAt = System.currentTimeMillis(),&#10;                lastLoginAt = System.currentTimeMillis()&#10;            )&#10;&#10;            userDao.clearCurrentUser()&#10;            userDao.insertUser(offlineUser)&#10;            authInterceptor.setAuthToken(&quot;offline_token&quot;)&#10;&#10;            Result.success(offlineUser)&#10;        }&#10;    }&#10;&#10;    suspend fun logout() {&#10;        try {&#10;            apiService.logout()&#10;        } catch (e: Exception) {&#10;            // Ignoriere Netzwerkfehler beim Logout&#10;        } finally {&#10;            userDao.clearCurrentUser()&#10;            authInterceptor.clearAuthToken()&#10;        }&#10;    }&#10;&#10;    suspend fun updateUserStats(userId: String, totalScore: Int, gamesPlayed: Int, bestScore: Int) {&#10;        userDao.updateUserStats(userId, totalScore, gamesPlayed, bestScore)&#10;&#10;        try {&#10;            // Versuche auch online zu synchronisieren&#10;            apiService.updateUserStats(userId, totalScore, gamesPlayed, bestScore)&#10;        } catch (e: Exception) {&#10;            // Ignoriere Netzwerkfehler&#10;        }&#10;    }&#10;&#10;    suspend fun refreshToken(): Result&lt;String&gt; {&#10;        return try {&#10;            val currentUser = getCurrentUser()&#10;            if (currentUser?.refreshToken != null) {&#10;                val response = apiService.refreshToken(RefreshTokenRequest(currentUser.refreshToken))&#10;                if (response.isSuccessful) {&#10;                    val tokenResponse = response.body()!!&#10;                    userDao.updateAuthToken(currentUser.id, tokenResponse.token, System.currentTimeMillis())&#10;                    authInterceptor.setAuthToken(tokenResponse.token)&#10;                    Result.success(tokenResponse.token)&#10;                } else {&#10;                    Result.failure(Exception(&quot;Token refresh failed&quot;))&#10;                }&#10;            } else {&#10;                Result.failure(Exception(&quot;No refresh token available&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.repositories&#10;&#10;import com.example.geogeusserclone.data.database.dao.UserDao&#10;import com.example.geogeusserclone.data.database.entities.UserEntity&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.data.network.LoginRequest&#10;import com.example.geogeusserclone.data.network.RegisterRequest&#10;import com.example.geogeusserclone.data.network.RefreshTokenRequest&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.Flow&#10;import java.util.UUID&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class UserRepository @Inject constructor(&#10;    private val apiService: ApiService,&#10;    private val userDao: UserDao,&#10;    private val authInterceptor: AuthInterceptor&#10;) : BaseRepository() {&#10;&#10;    fun getCurrentUserFlow(): Flow&lt;UserEntity?&gt; = userDao.getCurrentUserFlow()&#10;&#10;    suspend fun getCurrentUser(): UserEntity? = userDao.getCurrentUserSync()&#10;&#10;    suspend fun login(email: String, password: String): Result&lt;UserEntity&gt; {&#10;        return try {&#10;            val response = apiService.login(LoginRequest(email, password))&#10;&#10;            if (response.isSuccessful) {&#10;                val loginResponse = response.body()!!&#10;                val user = UserEntity(&#10;                    id = loginResponse.user.id,&#10;                    username = loginResponse.user.username,&#10;                    email = loginResponse.user.email,&#10;                    authToken = loginResponse.token,&#10;                    refreshToken = loginResponse.refreshToken,&#10;                    totalScore = loginResponse.user.totalScore ?: 0,&#10;                    gamesPlayed = loginResponse.user.gamesPlayed ?: 0,&#10;                    bestScore = 0, // Verwende Standardwert da bestScore möglicherweise nicht verfügbar ist&#10;                    lastLoginAt = System.currentTimeMillis()&#10;                )&#10;&#10;                userDao.clearCurrentUser()&#10;                userDao.insertUser(user)&#10;                authInterceptor.setAuthToken(loginResponse.token)&#10;&#10;                Result.success(user)&#10;            } else {&#10;                Result.failure(Exception(&quot;Login fehlgeschlagen&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun register(username: String, email: String, password: String): Result&lt;UserEntity&gt; {&#10;        return try {&#10;            val response = apiService.register(RegisterRequest(username, email, password))&#10;&#10;            if (response.isSuccessful) {&#10;                val registerResponse = response.body()!!&#10;                val user = UserEntity(&#10;                    id = registerResponse.user.id,&#10;                    username = registerResponse.user.username,&#10;                    email = registerResponse.user.email,&#10;                    authToken = registerResponse.token,&#10;                    refreshToken = registerResponse.refreshToken,&#10;                    createdAt = System.currentTimeMillis(),&#10;                    lastLoginAt = System.currentTimeMillis()&#10;                )&#10;&#10;                userDao.clearCurrentUser()&#10;                userDao.insertUser(user)&#10;                authInterceptor.setAuthToken(registerResponse.token)&#10;&#10;                Result.success(user)&#10;            } else {&#10;                Result.failure(Exception(&quot;Registrierung fehlgeschlagen&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            // Offline Fallback für Registrierung&#10;            val offlineUser = UserEntity(&#10;                id = UUID.randomUUID().toString(),&#10;                username = username,&#10;                email = email,&#10;                authToken = &quot;offline_token&quot;,&#10;                createdAt = System.currentTimeMillis(),&#10;                lastLoginAt = System.currentTimeMillis()&#10;            )&#10;&#10;            userDao.clearCurrentUser()&#10;            userDao.insertUser(offlineUser)&#10;            authInterceptor.setAuthToken(&quot;offline_token&quot;)&#10;&#10;            Result.success(offlineUser)&#10;        }&#10;    }&#10;&#10;    suspend fun logout() {&#10;        try {&#10;            apiService.logout()&#10;        } catch (e: Exception) {&#10;            // Ignoriere Netzwerkfehler beim Logout&#10;        } finally {&#10;            userDao.clearCurrentUser()&#10;            authInterceptor.clearAuthToken()&#10;        }&#10;    }&#10;&#10;    suspend fun updateUserStats(userId: String, totalScore: Int, gamesPlayed: Int, bestScore: Int) {&#10;        userDao.updateUserStats(userId, totalScore, gamesPlayed, bestScore)&#10;&#10;        try {&#10;            // Versuche auch online zu synchronisieren&#10;            apiService.updateUserStats(userId, totalScore, gamesPlayed, bestScore)&#10;        } catch (e: Exception) {&#10;            // Ignoriere Netzwerkfehler&#10;        }&#10;    }&#10;&#10;    suspend fun refreshToken(): Result&lt;String&gt; {&#10;        return try {&#10;            val currentUser = getCurrentUser()&#10;            if (currentUser?.refreshToken != null) {&#10;                val response = apiService.refreshToken(RefreshTokenRequest(currentUser.refreshToken))&#10;                if (response.isSuccessful) {&#10;                    val tokenResponse = response.body()!!&#10;                    userDao.updateAuthToken(currentUser.id, tokenResponse.token, System.currentTimeMillis())&#10;                    authInterceptor.setAuthToken(tokenResponse.token)&#10;                    Result.success(tokenResponse.token)&#10;                } else {&#10;                    Result.failure(Exception(&quot;Token refresh failed&quot;))&#10;                }&#10;            } else {&#10;                Result.failure(Exception(&quot;No refresh token available&quot;))&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/AuthActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/AuthActivity.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.AuthViewModel&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class AuthActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                AuthScreen(&#10;                    onNavigateToMenu = {&#10;                        startActivity(Intent(this, MenuActivity::class.java))&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun AuthScreen(&#10;    onNavigateToMenu: () -&gt; Unit,&#10;    authViewModel: AuthViewModel = hiltViewModel()&#10;) {&#10;    val authState by authViewModel.state.collectAsState()&#10;    var isLoginMode by remember { mutableStateOf(true) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var username by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(authState.isLoggedIn) {&#10;        if (authState.isLoggedIn) {&#10;            onNavigateToMenu()&#10;        }&#10;    }&#10;&#10;    Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = if (isLoginMode) &quot;Anmelden&quot; else &quot;Registrieren&quot;,&#10;                style = MaterialTheme.typography.headlineLarge&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            if (!isLoginMode) {&#10;                OutlinedTextField(&#10;                    value = username,&#10;                    onValueChange = { username = it },&#10;                    label = { Text(&quot;Benutzername&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            OutlinedTextField(&#10;                value = email,&#10;                onValueChange = { email = it },&#10;                label = { Text(&quot;E-Mail&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;Passwort&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (isLoginMode) {&#10;                        authViewModel.login(email, password)&#10;                    } else {&#10;                        authViewModel.register(username, email, password)&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = !authState.isLoading&#10;            ) {&#10;                if (authState.isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary&#10;                    )&#10;                } else {&#10;                    Text(if (isLoginMode) &quot;Anmelden&quot; else &quot;Registrieren&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            TextButton(&#10;                onClick = { isLoginMode = !isLoginMode }&#10;            ) {&#10;                Text(&#10;                    if (isLoginMode) &quot;Noch kein Konto? Registrieren&quot; &#10;                    else &quot;Bereits ein Konto? Anmelden&quot;&#10;                )&#10;            }&#10;&#10;            authState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = error,&#10;                        modifier = Modifier.padding(16.dp),&#10;                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/GameActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/GameActivity.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.components.*&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.GameViewModel&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class GameActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                GameScreen(&#10;                    onNavigateToMenu = {&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    onNavigateToMenu: () -&gt; Unit,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val gameState by gameViewModel.state.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        if (gameState.currentGame == null) {&#10;            gameViewModel.createNewGame(Constants.GAME_MODE_SINGLE)&#10;        }&#10;    }&#10;&#10;    Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            when {&#10;                gameState.gameCompleted -&gt; {&#10;                    // Game completion screen&#10;                    gameState.currentGame?.let { game -&gt;&#10;                        GameCompletionScreen(&#10;                            game = game,&#10;                            guesses = gameState.currentGuesses,&#10;                            onPlayAgain = {&#10;                                gameViewModel.createNewGame(Constants.GAME_MODE_SINGLE)&#10;                            },&#10;                            onMainMenu = onNavigateToMenu&#10;                        )&#10;                    }&#10;                }&#10;&#10;                gameState.showingResults &amp;&amp; gameState.lastGuessResult != null -&gt; {&#10;                    // Round result screen&#10;                    RoundResultView(&#10;                        guess = gameState.lastGuessResult!!,&#10;                        onNextRound = {&#10;                            gameViewModel.proceedToNextRound()&#10;                        },&#10;                        onShowMap = {&#10;                            // TODO: Show result map&#10;                        },&#10;                        isLastRound = gameState.currentGame?.currentRound == gameState.currentGame?.totalRounds&#10;                    )&#10;                }&#10;&#10;                gameState.isMapVisible -&gt; {&#10;                    // Map for guessing&#10;                    MapGuessComponent(&#10;                        onGuessSelected = { lat, lng -&gt;&#10;                            gameViewModel.submitGuess(lat, lng)&#10;                            gameViewModel.hideMap()&#10;                        },&#10;                        onMapClose = {&#10;                            gameViewModel.hideMap()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Main game view with location image&#10;                    LocationImageView(&#10;                        location = gameState.currentLocation,&#10;                        timeRemaining = gameState.timeRemaining,&#10;                        onMapClick = {&#10;                            gameViewModel.showMap()&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Loading overlay&#10;            if (gameState.isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = androidx.compose.ui.Alignment.Center&#10;                ) {&#10;                    Card {&#10;                        Column(&#10;                            modifier = Modifier.padding(32.dp),&#10;                            horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Lade...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Error handling&#10;            gameState.error?.let { error -&gt;&#10;                LaunchedEffect(error) {&#10;                    // Show error snackbar or handle error&#10;                    gameViewModel.clearError()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.components.*&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.GameViewModel&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class GameActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                GameScreen(&#10;                    onNavigateToMenu = {&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun GameScreen(&#10;    onNavigateToMenu: () -&gt; Unit,&#10;    gameViewModel: GameViewModel = hiltViewModel()&#10;) {&#10;    val gameState by gameViewModel.state.collectAsState()&#10;&#10;    LaunchedEffect(Unit) {&#10;        if (gameState.currentGame == null) {&#10;            gameViewModel.createNewGame(Constants.GAME_MODE_SINGLE)&#10;        }&#10;    }&#10;&#10;    Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            when {&#10;                gameState.gameCompleted -&gt; {&#10;                    // Game completion screen&#10;                    gameState.currentGame?.let { game -&gt;&#10;                        GameCompletionScreen(&#10;                            game = game,&#10;                            guesses = gameState.currentGuesses,&#10;                            onPlayAgain = {&#10;                                gameViewModel.createNewGame(Constants.GAME_MODE_SINGLE)&#10;                            },&#10;                            onMainMenu = onNavigateToMenu&#10;                        )&#10;                    }&#10;                }&#10;&#10;                gameState.showingResults &amp;&amp; gameState.lastGuessResult != null -&gt; {&#10;                    // Round result screen&#10;                    RoundResultView(&#10;                        guess = gameState.lastGuessResult!!,&#10;                        onNextRound = {&#10;                            gameViewModel.proceedToNextRound()&#10;                        },&#10;                        onShowMap = {&#10;                            // TODO: Show result map&#10;                        },&#10;                        isLastRound = gameState.currentGame?.currentRound == gameState.currentGame?.totalRounds&#10;                    )&#10;                }&#10;&#10;                gameState.isMapVisible -&gt; {&#10;                    // Map for guessing&#10;                    MapGuessComponent(&#10;                        onGuessSelected = { lat, lng -&gt;&#10;                            gameViewModel.submitGuess(lat, lng)&#10;                            gameViewModel.hideMap()&#10;                        },&#10;                        onMapClose = {&#10;                            gameViewModel.hideMap()&#10;                        }&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Main game view with location image&#10;                    LocationImageView(&#10;                        location = gameState.currentLocation,&#10;                        timeRemaining = gameState.timeRemaining,&#10;                        onMapClick = {&#10;                            gameViewModel.showMap()&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Loading overlay&#10;            if (gameState.isLoading) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Card {&#10;                        Column(&#10;                            modifier = Modifier.padding(32.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Lade...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Error handling&#10;            gameState.error?.let { error -&gt;&#10;                LaunchedEffect(error) {&#10;                    // Show error snackbar or handle error&#10;                    gameViewModel.clearError()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/MenuActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/activities/MenuActivity.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.ui.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.geogeusserclone.ui.theme.GeoGeusserCloneTheme&#10;import com.example.geogeusserclone.viewmodels.AuthViewModel&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MenuActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            GeoGeusserCloneTheme {&#10;                MenuScreen(&#10;                    onNavigateToGame = {&#10;                        startActivity(Intent(this, GameActivity::class.java))&#10;                    },&#10;                    onNavigateToAuth = {&#10;                        startActivity(Intent(this, AuthActivity::class.java))&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MenuScreen(&#10;    onNavigateToGame: () -&gt; Unit,&#10;    onNavigateToAuth: () -&gt; Unit,&#10;    authViewModel: AuthViewModel = hiltViewModel()&#10;) {&#10;    val authState by authViewModel.state.collectAsState()&#10;&#10;    LaunchedEffect(authState.isLoggedIn) {&#10;        if (!authState.isLoggedIn) {&#10;            onNavigateToAuth()&#10;        }&#10;    }&#10;&#10;    Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;&quot;,&#10;                style = MaterialTheme.typography.displayLarge&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            &#10;            Text(&#10;                text = &quot;GeoGuessr Clone&quot;,&#10;                style = MaterialTheme.typography.headlineLarge&#10;            )&#10;&#10;            authState.currentUser?.let { user -&gt;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Willkommen, ${user.username}!&quot;,&#10;                    style = MaterialTheme.typography.titleMedium&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(48.dp))&#10;&#10;            Button(&#10;                onClick = onNavigateToGame,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Einzelspieler&quot;)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedButton(&#10;                onClick = { /* TODO: Mehrspieler */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Mehrspieler&quot;)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedButton(&#10;                onClick = { /* TODO: Battle Royale */ },&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Battle Royale&quot;)&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            TextButton(&#10;                onClick = { &#10;                    authViewModel.logout()&#10;                    onNavigateToAuth()&#10;                }&#10;            ) {&#10;                Text(&quot;Abmelden&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/AuthViewModel.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.viewmodels&#10;&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.geogeusserclone.data.database.entities.UserEntity&#10;import com.example.geogeusserclone.data.repositories.UserRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;data class AuthState(&#10;    val isLoading: Boolean = false,&#10;    val isLoggedIn: Boolean = false,&#10;    val currentUser: UserEntity? = null,&#10;    val error: String? = null&#10;)&#10;&#10;@HiltViewModel&#10;class AuthViewModel @Inject constructor(&#10;    private val userRepository: UserRepository&#10;) : BaseViewModel&lt;AuthState&gt;(AuthState()) {&#10;&#10;    init {&#10;        checkAuthStatus()&#10;    }&#10;&#10;    private fun checkAuthStatus() {&#10;        viewModelScope.launch {&#10;            userRepository.getCurrentUserFlow().collect { user -&gt;&#10;                setState(state.value.copy(&#10;                    currentUser = user,&#10;                    isLoggedIn = user != null&#10;                ))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun login(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            setState(state.value.copy(isLoading = true, error = null))&#10;&#10;            userRepository.login(email, password)&#10;                .onSuccess { user -&gt;&#10;                    setState(state.value.copy(&#10;                        isLoading = false,&#10;                        isLoggedIn = true,&#10;                        currentUser = user,&#10;                        error = null&#10;                    ))&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    setState(state.value.copy(&#10;                        isLoading = false,&#10;                        error = exception.message ?: &quot;Login fehlgeschlagen&quot;&#10;                    ))&#10;                }&#10;        }&#10;    }&#10;&#10;    fun register(username: String, email: String, password: String) {&#10;        viewModelScope.launch {&#10;            setState(state.value.copy(isLoading = true, error = null))&#10;&#10;            userRepository.register(username, email, password)&#10;                .onSuccess { user -&gt;&#10;                    setState(state.value.copy(&#10;                        isLoading = false,&#10;                        isLoggedIn = true,&#10;                        currentUser = user,&#10;                        error = null&#10;                    ))&#10;                }&#10;                .onFailure { exception -&gt;&#10;                    setState(state.value.copy(&#10;                        isLoading = false,&#10;                        error = exception.message ?: &quot;Registrierung fehlgeschlagen&quot;&#10;                    ))&#10;                }&#10;        }&#10;    }&#10;&#10;    fun logout() {&#10;        viewModelScope.launch {&#10;            userRepository.logout()&#10;            setState(state.value.copy(&#10;                isLoggedIn = false,&#10;                currentUser = null,&#10;                error = null&#10;            ))&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        setState(state.value.copy(error = null))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/BaseViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/viewmodels/BaseViewModel.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.viewmodels&#10;&#10;import androidx.lifecycle.ViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;&#10;abstract class BaseViewModel&lt;T&gt;(initialState: T) : ViewModel() {&#10;    &#10;    private val _state = MutableStateFlow(initialState)&#10;    val state: StateFlow&lt;T&gt; = _state.asStateFlow()&#10;&#10;    protected fun setState(newState: T) {&#10;        _state.value = newState&#10;    }&#10;&#10;    protected fun updateState(transform: (T) -&gt; T) {&#10;        _state.value = transform(_state.value)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>