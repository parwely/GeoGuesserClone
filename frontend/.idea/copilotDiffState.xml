<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/proguard-rules.pro">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/proguard-rules.pro" />
              <option name="originalContent" value="# Add project specific ProGuard rules here.&#10;# You can control the set of applied configuration files using the&#10;# proguardFiles setting in build.gradle.&#10;#&#10;# For more details, see&#10;#   http://developer.android.com/guide/developing/tools/proguard.html&#10;&#10;# If your project uses WebView with JS, uncomment the following&#10;# and specify the fully qualified class name to the JavaScript interface&#10;# class:&#10;#-keepclassmembers class fqcn.of.javascript.interface.for.webview {&#10;#   public *;&#10;#}&#10;&#10;# Uncomment this to preserve the line number information for&#10;# debugging stack traces.&#10;#-keepattributes SourceFile,LineNumberTable&#10;&#10;# If you keep the line number information, uncomment this to&#10;# hide the original source file name.&#10;#-renamesourcefileattribute SourceFile" />
              <option name="updatedContent" value="# Add project specific ProGuard rules here.&#10;# You can control the set of applied configuration files using the&#10;# proguardFiles setting in build.gradle.&#10;#&#10;# For more details, see&#10;#   http://developer.android.com/guide/developing/tools/proguard.html&#10;&#10;# If your project uses WebView with JS, uncomment the following&#10;# and specify the fully qualified class name to the JavaScript interface&#10;# class:&#10;#-keepclassmembers class fqcn.of.javascript.interface.for.webview {&#10;#   public *;&#10;#}&#10;&#10;# Uncomment this to preserve the line number information for&#10;# debugging stack traces.&#10;#-keepattributes SourceFile,LineNumberTable&#10;&#10;# If you keep the line number information, uncomment this to&#10;# hide the original source file name.&#10;#-renamesourcefileattribute SourceFile&#10;&#10;# Performance optimizations&#10;-optimizationpasses 5&#10;-allowaccessmodification&#10;-mergeinterfacesaggressively&#10;&#10;# Retrofit&#10;-keepattributes Signature, InnerClasses, EnclosingMethod&#10;-keepattributes RuntimeVisibleAnnotations, RuntimeVisibleParameterAnnotations&#10;-keepattributes AnnotationDefault&#10;-keepclassmembers,allowshrinking,allowobfuscation interface * {&#10;    @retrofit2.http.* &lt;methods&gt;;&#10;}&#10;-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement&#10;-dontwarn javax.annotation.**&#10;-dontwarn kotlin.Unit&#10;-dontwarn retrofit2.KotlinExtensions&#10;&#10;# OkHttp&#10;-dontwarn okhttp3.**&#10;-dontwarn okio.**&#10;-dontwarn javax.annotation.**&#10;-keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase&#10;&#10;# Room&#10;-keepattributes *Annotation*&#10;-keepclassmembers class * extends androidx.room.RoomDatabase {&#10;    *;&#10;}&#10;-keepclassmembers @androidx.room.Entity class * {&#10;    *;&#10;}&#10;&#10;# Coil&#10;-dontwarn coil.**&#10;&#10;# OSMDroid&#10;-dontwarn org.osmdroid.**&#10;&#10;# Hilt&#10;-dontwarn dagger.hilt.**&#10;&#10;# Kotlin Coroutines&#10;-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}&#10;-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}&#10;-keepclassmembers class kotlinx.coroutines.** {&#10;    volatile &lt;fields&gt;;&#10;}&#10;&#10;# Remove logging in release&#10;-assumenosideeffects class android.util.Log {&#10;    public static *** d(...);&#10;    public static *** v(...);&#10;    public static *** i(...);&#10;}&#10;&#10;# Performance: Remove debug info&#10;-keepattributes !SourceFile,!LineNumberTable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/LocationResponse.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/LocationResponse.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.network&#10;&#10;data class LocationResponse(&#10;    val id: String,&#10;    val latitude: Double,&#10;    val longitude: Double,&#10;    val imageUrl: String,&#10;    val country: String? = null,&#10;    val city: String? = null,&#10;    val difficulty: Int = 1&#10;)&#10;&#10;data class LocationsResponse(&#10;    val locations: List&lt;LocationResponse&gt;,&#10;    val total: Int = 0,&#10;    val page: Int = 1,&#10;    val limit: Int = 10&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/NetworkConfig.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/network/NetworkConfig.kt" />
              <option name="originalContent" value="package com.example.geogeusserclone.data.network&#10;&#10;import com.example.geogeusserclone.BuildConfig&#10;&#10;object NetworkConfig {&#10;    // Android Emulator&#10;    const val EMULATOR_BASE_URL = &quot;http://10.0.2.2:3000/api/&quot;&#10;&#10;    // Lokales Netzwerk (IP-Adresse anpassen)&#10;    const val LOCAL_BASE_URL = &quot;http://192.168.1.100:3000/api/&quot;&#10;&#10;    // Production (falls vorhanden)&#10;    const val PROD_BASE_URL = &quot;https://your-domain.com/api/&quot;&#10;&#10;    val BASE_URL = if (BuildConfig.DEBUG) {&#10;        EMULATOR_BASE_URL // Für Android Emulator&#10;        // LOCAL_BASE_URL // Uncomment für echtes Gerät&#10;    } else {&#10;        PROD_BASE_URL&#10;    }&#10;&#10;    // Timeout-Konfiguration&#10;    const val CONNECT_TIMEOUT = 30L&#10;    const val READ_TIMEOUT = 30L&#10;    const val WRITE_TIMEOUT = 30L&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.network&#10;&#10;object NetworkConfig {&#10;    // Android Emulator&#10;    const val EMULATOR_BASE_URL = &quot;http://10.0.2.2:3000/api/&quot;&#10;&#10;    // Lokales Netzwerk (IP-Adresse anpassen)&#10;    const val LOCAL_BASE_URL = &quot;http://192.168.1.100:3000/api/&quot;&#10;&#10;    // Production (falls vorhanden)&#10;    const val PROD_BASE_URL = &quot;https://your-domain.com/api/&quot;&#10;&#10;    val BASE_URL = EMULATOR_BASE_URL // Verwende Emulator URL direkt&#10;&#10;    // Timeout-Konfiguration&#10;    const val CONNECT_TIMEOUT = 30L&#10;    const val READ_TIMEOUT = 30L&#10;    const val WRITE_TIMEOUT = 30L&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/LocationCacheRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/LocationCacheRepository.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.repositories&#13;&#10;&#13;&#10;import com.example.geogeusserclone.data.database.dao.LocationDao&#13;&#10;import com.example.geogeusserclone.data.database.entities.LocationEntity&#13;&#10;import com.example.geogeusserclone.data.network.ApiService&#13;&#10;import kotlinx.coroutines.Dispatchers&#13;&#10;import kotlinx.coroutines.flow.Flow&#13;&#10;import kotlinx.coroutines.withContext&#13;&#10;import javax.inject.Inject&#13;&#10;import javax.inject.Singleton&#13;&#10;&#13;&#10;@Singleton&#13;&#10;class LocationCacheRepository @Inject constructor(&#13;&#10;    private val apiService: ApiService,&#13;&#10;    private val locationDao: LocationDao&#13;&#10;) {&#13;&#10;&#13;&#10;    suspend fun preloadLocationsInBackground() = withContext(Dispatchers.IO) {&#13;&#10;        try {&#13;&#10;            // Lade nur wenn weniger als 10 Locations im Cache&#13;&#10;            val cachedCount = locationDao.getCachedLocationCount()&#13;&#10;            if (cachedCount &lt; 10) {&#13;&#10;                val response = apiService.getRandomLocations(50)&#13;&#10;                if (response.isSuccessful) {&#13;&#10;                    val locationsResponse = response.body()!!&#13;&#10;                    val locationEntities = locationsResponse.data.locations.map { backendLocation -&gt;&#13;&#10;                        LocationEntity(&#13;&#10;                            id = backendLocation.id.toString(),&#13;&#10;                            latitude = backendLocation.coordinates.latitude,&#13;&#10;                            longitude = backendLocation.coordinates.longitude,&#13;&#10;                            imageUrl = backendLocation.imageUrls.firstOrNull() ?: &quot;&quot;,&#13;&#10;                            country = backendLocation.country,&#13;&#10;                            city = backendLocation.city,&#13;&#10;                            difficulty = backendLocation.difficulty,&#13;&#10;                            isCached = true,&#13;&#10;                            isUsed = false&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Batch insert für bessere Performance&#13;&#10;                    locationDao.insertLocations(locationEntities)&#13;&#10;&#13;&#10;                    // Preload images im Hintergrund&#13;&#10;                    preloadImages(locationEntities.take(5)) // Nur erste 5 Bilder&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            // Silent fail - App funktioniert weiter mit Fallback Locations&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private suspend fun preloadImages(locations: List&lt;LocationEntity&gt;) = withContext(Dispatchers.IO) {&#13;&#10;        // Implementierung für Image Preloading&#13;&#10;        // Dies würde die Bilder in den Cache laden ohne sie anzuzeigen&#13;&#10;    }&#13;&#10;&#13;&#10;    suspend fun getNextLocations(count: Int = 3): List&lt;LocationEntity&gt; = withContext(Dispatchers.IO) {&#13;&#10;        locationDao.getUnusedLocations(count)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/StreetViewLocationRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/data/repositories/StreetViewLocationRepository.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.data.repositories&#10;&#10;import com.example.geogeusserclone.data.database.dao.LocationDao&#10;import com.example.geogeusserclone.data.database.entities.LocationEntity&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.MapillaryApiService&#10;import com.example.geogeusserclone.utils.Constants&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.withTimeoutOrNull&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class StreetViewLocationRepository @Inject constructor(&#10;    private val apiService: ApiService,&#10;    private val mapillaryApiService: MapillaryApiService,&#10;    private val locationDao: LocationDao&#10;) : BaseRepository() {&#10;&#10;    suspend fun getRandomLocationWithStreetView(): Result&lt;LocationEntity&gt; {&#10;        return try {&#10;            // 1. Versuche zuerst lokale unbenutzte Location&#10;            val unusedLocation = locationDao.getRandomUnusedLocation()&#10;            if (unusedLocation != null) {&#10;                locationDao.markLocationAsUsed(unusedLocation.id)&#10;                return Result.success(unusedLocation)&#10;            }&#10;&#10;            // 2. Erstelle Fallback-Locations mit echten 360° StreetView-Bildern&#10;            val streetViewLocations = createStreetViewFallbackLocations()&#10;            locationDao.insertLocations(streetViewLocations)&#10;            &#10;            val randomLocation = streetViewLocations.random()&#10;            locationDao.markLocationAsUsed(randomLocation.id)&#10;            &#10;            return Result.success(randomLocation)&#10;&#10;        } catch (e: Exception) {&#10;            // Emergency Fallback&#10;            val emergencyLocation = createEmergencyLocation()&#10;            try {&#10;                locationDao.insertLocation(emergencyLocation)&#10;                locationDao.markLocationAsUsed(emergencyLocation.id)&#10;                Result.success(emergencyLocation)&#10;            } catch (dbError: Exception) {&#10;                Result.failure(Exception(&quot;Kritischer Fehler: Kann keine Location laden&quot;))&#10;            }&#10;        }&#10;    }&#10;&#10;    private suspend fun createStreetViewFallbackLocations(): List&lt;LocationEntity&gt; {&#10;        val fallbackLocations = mutableListOf&lt;LocationEntity&gt;()&#10;        &#10;        // Versuche echte Mapillary-Bilder für beliebte Städte zu holen&#10;        val popularCities = listOf(&#10;            Triple(48.8566, 2.3522, &quot;Paris&quot;),      // Paris&#10;            Triple(51.5074, -0.1278, &quot;London&quot;),   // London&#10;            Triple(40.7128, -74.0060, &quot;New York&quot;), // New York&#10;            Triple(35.6762, 139.6503, &quot;Tokyo&quot;),   // Tokyo&#10;            Triple(-33.8688, 151.2093, &quot;Sydney&quot;), // Sydney&#10;            Triple(52.5200, 13.4050, &quot;Berlin&quot;),   // Berlin&#10;            Triple(41.9028, 12.4964, &quot;Rome&quot;),     // Rome&#10;            Triple(41.3851, 2.1734, &quot;Barcelona&quot;)  // Barcelona&#10;        )&#10;&#10;        popularCities.forEachIndexed { index, (lat, lng, cityName) -&gt;&#10;            try {&#10;                val streetViewImage = fetchMapillaryImageForLocation(lat, lng)&#10;                if (streetViewImage != null) {&#10;                    fallbackLocations.add(&#10;                        LocationEntity(&#10;                            id = &quot;streetview_${cityName.lowercase()}_$index&quot;,&#10;                            latitude = streetViewImage.geometry.coordinates[1], // Mapillary coords&#10;                            longitude = streetViewImage.geometry.coordinates[0],&#10;                            imageUrl = streetViewImage.thumb_2048_url ?: streetViewImage.thumb_1024_url ?: &quot;&quot;,&#10;                            country = getCountryFromCity(cityName),&#10;                            city = cityName,&#10;                            difficulty = 2,&#10;                            isCached = true,&#10;                            isUsed = false&#10;                        )&#10;                    )&#10;                } else {&#10;                    // Fallback auf hochwertige Unsplash-Bilder&#10;                    fallbackLocations.add(createHighQualityFallbackLocation(lat, lng, cityName, index))&#10;                }&#10;            } catch (e: Exception) {&#10;                // Fallback auf statische Bilder&#10;                fallbackLocations.add(createHighQualityFallbackLocation(lat, lng, cityName, index))&#10;            }&#10;        }&#10;&#10;        return fallbackLocations&#10;    }&#10;&#10;    private suspend fun fetchMapillaryImageForLocation(lat: Double, lng: Double): com.example.geogeusserclone.data.network.MapillaryImage? {&#10;        return try {&#10;            // Erstelle Bounding Box (ca. 1km Radius)&#10;            val offset = 0.01 // Ungefähr 1km&#10;            val bbox = &quot;${lng - offset},${lat - offset},${lng + offset},${lat + offset}&quot;&#10;            &#10;            val response = withTimeoutOrNull(3000) {&#10;                mapillaryApiService.getImagesNearby(&#10;                    bbox = bbox,&#10;                    isPano = true,&#10;                    limit = 5,&#10;                    accessToken = Constants.MAPILLARY_ACCESS_TOKEN&#10;                )&#10;            }&#10;&#10;            if (response?.isSuccessful == true) {&#10;                response.body()?.data?.firstOrNull()&#10;            } else null&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun createHighQualityFallbackLocation(lat: Double, lng: Double, cityName: String, index: Int): LocationEntity {&#10;        val imageUrls = mapOf(&#10;            &quot;Paris&quot; to &quot;https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;London&quot; to &quot;https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;New York&quot; to &quot;https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;Tokyo&quot; to &quot;https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;Sydney&quot; to &quot;https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;Berlin&quot; to &quot;https://images.unsplash.com/photo-1587330979470-3016b6702d89?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;Rome&quot; to &quot;https://images.unsplash.com/photo-1552832230-c0197dd311b5?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            &quot;Barcelona&quot; to &quot;https://images.unsplash.com/photo-1539037116277-4db20889f2d4?w=1200&amp;h=800&amp;fit=crop&quot;&#10;        )&#10;&#10;        return LocationEntity(&#10;            id = &quot;fallback_${cityName.lowercase()}_$index&quot;,&#10;            latitude = lat,&#10;            longitude = lng,&#10;            imageUrl = imageUrls[cityName] ?: &quot;https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            country = getCountryFromCity(cityName),&#10;            city = cityName,&#10;            difficulty = 2,&#10;            isCached = true,&#10;            isUsed = false&#10;        )&#10;    }&#10;&#10;    private fun createEmergencyLocation(): LocationEntity {&#10;        return LocationEntity(&#10;            id = &quot;emergency_paris&quot;,&#10;            latitude = 48.8566,&#10;            longitude = 2.3522,&#10;            imageUrl = &quot;https://images.unsplash.com/photo-1502602898536-47ad22581b52?w=1200&amp;h=800&amp;fit=crop&quot;,&#10;            country = &quot;France&quot;,&#10;            city = &quot;Paris&quot;,&#10;            difficulty = 2,&#10;            isCached = true,&#10;            isUsed = false&#10;        )&#10;    }&#10;&#10;    private fun getCountryFromCity(cityName: String): String {&#10;        return when (cityName) {&#10;            &quot;Paris&quot; -&gt; &quot;France&quot;&#10;            &quot;London&quot; -&gt; &quot;United Kingdom&quot;&#10;            &quot;New York&quot; -&gt; &quot;United States&quot;&#10;            &quot;Tokyo&quot; -&gt; &quot;Japan&quot;&#10;            &quot;Sydney&quot; -&gt; &quot;Australia&quot;&#10;            &quot;Berlin&quot; -&gt; &quot;Germany&quot;&#10;            &quot;Rome&quot; -&gt; &quot;Italy&quot;&#10;            &quot;Barcelona&quot; -&gt; &quot;Spain&quot;&#10;            else -&gt; &quot;Unknown&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Preloade Locations mit echten StreetView-Bildern&#10;     */&#10;    suspend fun preloadStreetViewLocations() {&#10;        try {&#10;            val streetViewLocations = createStreetViewFallbackLocations()&#10;            locationDao.insertLocations(streetViewLocations)&#10;        } catch (e: Exception) {&#10;            // Fallback auf normale Locations&#10;            val normalFallbacks = createStreetViewFallbackLocations()&#10;            locationDao.insertLocations(normalFallbacks)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/di/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/di/NetworkModule.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.di&#10;&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.AuthInterceptor&#10;import com.example.geogeusserclone.utils.Constants&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideHttpLoggingInterceptor(): HttpLoggingInterceptor {&#10;        return HttpLoggingInterceptor().apply {&#10;            level = HttpLoggingInterceptor.Level.BODY&#10;        }&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttpClient(&#10;        authInterceptor: AuthInterceptor,&#10;        loggingInterceptor: HttpLoggingInterceptor&#10;    ): OkHttpClient {&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(loggingInterceptor)&#10;            .connectTimeout(Constants.CONNECT_TIMEOUT, TimeUnit.SECONDS)&#10;            .readTimeout(Constants.READ_TIMEOUT, TimeUnit.SECONDS)&#10;            .writeTimeout(Constants.WRITE_TIMEOUT, TimeUnit.SECONDS)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(Constants.BASE_URL)&#10;            .client(okHttpClient)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideApiService(retrofit: Retrofit): ApiService {&#10;        return retrofit.create(ApiService::class.java)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/di/RepositoryModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/di/RepositoryModule.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.di&#10;&#10;import com.example.geogeusserclone.data.database.dao.GameDao&#10;import com.example.geogeusserclone.data.database.dao.GuessDao&#10;import com.example.geogeusserclone.data.database.dao.LocationDao&#10;import com.example.geogeusserclone.data.database.dao.UserDao&#10;import com.example.geogeusserclone.data.network.ApiService&#10;import com.example.geogeusserclone.data.network.MapillaryApiService&#10;import com.example.geogeusserclone.data.repositories.*&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object RepositoryModule {&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideUserRepository(&#10;        apiService: ApiService,&#10;        userDao: UserDao,&#10;        authInterceptor: com.example.geogeusserclone.data.network.AuthInterceptor&#10;    ): UserRepository {&#10;        return UserRepository(apiService, userDao, authInterceptor)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLocationRepository(&#10;        apiService: ApiService,&#10;        mapillaryApiService: MapillaryApiService,&#10;        locationDao: LocationDao&#10;    ): LocationRepository {&#10;        return LocationRepository(apiService, mapillaryApiService, locationDao)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideGameRepository(&#10;        apiService: ApiService,&#10;        gameDao: GameDao,&#10;        guessDao: GuessDao,&#10;        locationDao: LocationDao,&#10;        userRepository: UserRepository&#10;    ): GameRepository {&#10;        return GameRepository(apiService, gameDao, guessDao, locationDao, userRepository)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideLocationCacheRepository(&#10;        apiService: ApiService,&#10;        locationDao: LocationDao&#10;    ): LocationCacheRepository {&#10;        return LocationCacheRepository(apiService, locationDao)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/components/MapViewScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/ui/components/MapViewScreen.kt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/MapCacheManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/geogeusserclone/utils/MapCacheManager.kt" />
              <option name="updatedContent" value="package com.example.geogeusserclone.utils&#10;&#10;import android.content.Context&#10;import androidx.work.*&#10;import com.example.geogeusserclone.data.repositories.LocationCacheRepository&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Background-Service für Map Tile Preloading&#10; */&#10;@Singleton&#10;class MapCacheManager @Inject constructor(&#10;    @ApplicationContext private val context: Context,&#10;    private val locationCacheRepository: LocationCacheRepository&#10;) {&#10;&#10;    /**&#10;     * Startet Background-Preloading von Map Tiles&#10;     */&#10;    fun startMapTilePreloading() {&#10;        val constraints = Constraints.Builder()&#10;            .setRequiredNetworkType(NetworkType.UNMETERED) // Nur WLAN&#10;            .setRequiresBatteryNotLow(true)&#10;            .setRequiresCharging(false)&#10;            .build()&#10;&#10;        val preloadWork = OneTimeWorkRequestBuilder&lt;MapTilePreloadWorker&gt;()&#10;            .setConstraints(constraints)&#10;            .setBackoffCriteria(&#10;                BackoffPolicy.EXPONENTIAL,&#10;                WorkRequest.MIN_BACKOFF_MILLIS,&#10;                TimeUnit.MILLISECONDS&#10;            )&#10;            .build()&#10;&#10;        WorkManager.getInstance(context)&#10;            .enqueueUniqueWork(&#10;                &quot;map_tile_preload&quot;,&#10;                ExistingWorkPolicy.KEEP,&#10;                preloadWork&#10;            )&#10;    }&#10;&#10;    /**&#10;     * Bereinigt alte Map Tiles bei Low Memory&#10;     */&#10;    fun cleanupOldTiles() {&#10;        val cleanupWork = OneTimeWorkRequestBuilder&lt;MapTileCleanupWorker&gt;()&#10;            .build()&#10;&#10;        WorkManager.getInstance(context)&#10;            .enqueue(cleanupWork)&#10;    }&#10;&#10;    /**&#10;     * Überwacht Map Performance Metriken&#10;     */&#10;    fun trackMapPerformance(&#10;        loadTime: Long,&#10;        tileCount: Int,&#10;        memoryUsage: Long&#10;    ) {&#10;        // Performance Tracking für Optimierungen&#10;        if (loadTime &gt; 3000) { // Über 3 Sekunden&#10;            // Trigger für Cache-Optimierung&#10;            cleanupOldTiles()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Worker für Map Tile Preloading&#10; */&#10;class MapTilePreloadWorker(&#10;    context: Context,&#10;    params: WorkerParameters&#10;) : CoroutineWorker(context, params) {&#10;&#10;    override suspend fun doWork(): Result {&#10;        return try {&#10;            // Preload häufig verwendete Gebiete&#10;            preloadPopularRegions()&#10;            Result.success()&#10;        } catch (e: Exception) {&#10;            Result.retry()&#10;        }&#10;    }&#10;&#10;    private suspend fun preloadPopularRegions() {&#10;        val popularRegions = listOf(&#10;            Pair(54.5260, 15.2551), // Europa&#10;            Pair(39.8283, -98.5795), // USA&#10;            Pair(35.6762, 139.6503), // Tokyo&#10;            Pair(-33.8688, 151.2093) // Sydney&#10;        )&#10;&#10;        // Implementierung des Tile-Preloadings&#10;        // Dies würde die Tiles für diese Regionen im Cache speichern&#10;    }&#10;}&#10;&#10;/**&#10; * Worker für Map Cache Cleanup&#10; */&#10;class MapTileCleanupWorker(&#10;    context: Context,&#10;    params: WorkerParameters&#10;) : CoroutineWorker(context, params) {&#10;&#10;    override suspend fun doWork(): Result {&#10;        return try {&#10;            val cacheDir = applicationContext.cacheDir&#10;            val mapCacheDir = java.io.File(cacheDir, &quot;osmdroid&quot;)&#10;            &#10;            if (mapCacheDir.exists()) {&#10;                // Lösche Tiles älter als 7 Tage&#10;                val weekAgo = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000)&#10;                &#10;                mapCacheDir.listFiles()?.forEach { file -&gt;&#10;                    if (file.lastModified() &lt; weekAgo) {&#10;                        file.delete()&#10;                    }&#10;                }&#10;            }&#10;            &#10;            Result.success()&#10;        } catch (e: Exception) {&#10;            Result.failure()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>